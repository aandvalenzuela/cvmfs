cvmfs_test_name="Webhook notifications"
cvmfs_test_autofs_on_startup=false
cvmfs_test_suites="ducc"

check_id_action() {
    expected_id=$1
    expected_action=$2

    notification=$( tail -n 1 $notifications_file )
    id=(${notification//|/ })

    if [ ${id[0]} != ${expected_id} ]
    then
        echo 'The id of the action is not correct'
        kill $pid
        return 1
    fi

    if [ ${id[1]} != ${expected_action} ]
    then
        echo 'The action not correct'
        kill $pid
        return 2
    fi

    sleep 1
}

send_push() {
    curl -X POST http://localhost:8080/webhooks/test-cvmfs-ingestion -H "Content-Type: application/json" -d "{\"type\": \"PUSH_ARTIFACT\", \"event_data\": {\"resources\": [{\"resource_url\": \"registry.cern.ch/unpacked-dev/image:tag\"}]}}" || return 3
}

send_delete() {
    curl -X POST http://webhook-c8vm:8080/webhooks/test-cvmfs-ingestion -H "Content-Type: application/json" -d "{\"type\": \"DELETE_ARTIFACT\", \"event_data\": {\"resources\": [{\"resource_url\": \"registry.cern.ch/unpacked-dev/image:tag\"}]}}" || return 4
}

send_replication() {
    curl -X POST http://webhook-c8vm:8080/webhooks/test-cvmfs-ingestion -H "Content-Type: application/json" -d "{\"type\": \"REPLICATION\", \"event_data\": {\"replication\": { \"dest_resource\": {\"endpoint\": \"https://registry.cern.ch\", \"namespace\": \"unpacked-dev\"}, \"successful_artifact\": [{\"type\": \"image\", \"status\": \"Success\", \"name_tag\": \"image:tag\"}]}}}" || return 5
}

cvmfs_run_test() {
    notifications_file="notifications.txt"
    sudo python3 /root/cvmfs/test/src/406-ducc-webhook-notifications/registry-webhook.py -f $notifications_file -h 188.185.120.234 -p 8080 &

    sleep 1
    pid=$(echo $!)

    yes | touch $notifications_file

    send_push
    check_id_action '0' 'push'

    send_delete
    check_id_action '1' 'delete'

    send_replication
    check_id_action '2' 'replication'

    yes | touch $notifications_file

    send_delete
    check_id_action '0' 'delete'

    send_replication
    check_id_action '1' 'replication'

    send_replication
    check_id_action '2' 'replication'

    send_push
    check_id_action '3' 'push'

    yes | touch $notifications_file

    send_replication
    check_id_action '0' 'replication'

    send_push
    check_id_action '1' 'push'

    send_push
    check_id_action '2' 'push'

    send_push
    check_id_action '3' 'push'

    send_delete
    check_id_action '4' 'delete'

    send_delete
    check_id_action '5' 'delete'

    send_delete
    check_id_action '6' 'delete'

    echo "999|push|https://registry.cern.ch/unpacked-dev/image:tag" >> $notifications_file

    send_delete
    check_id_action '1000' 'delete'

    original_content=$(<$notifications_file)
    original_content="${original_content}\n"
    original_content=$(echo -e $original_content)

    send_push
    check_id_action '1001' 'push'

    rotated_file="${notifications_file%".txt"}"
    rotated_file="${rotated_file}1000.txt"

    rotated_content=$(<$rotated_file)
    pattern="--- FILE ROTATION ---"
    rotated_content=${rotated_content%$pattern}
    rotated_content=$(echo -e $rotated_content)

    if [ "$original_content" != "$rotated_content" ]
    then
        echo -e "\nAn error ocurred during file rotation: content mismatch"
        kill $pid
        return 10
    fi

    if [ ! -f "$rotated_file" ]; then
        echo -e "\nAn error ocurred during file rotation: backup file does not exist"
        kill $pid
        return 11
    fi

    send_delete
    check_id_action '1002' 'delete'

    send_replication
    check_id_action '1003' 'replication'

    kill $pid

    return 0
}
